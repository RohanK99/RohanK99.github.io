{"version":3,"sources":["components/home.js","App.js","registerServiceWorker.js","index.js"],"names":["url","name","wrap","ShootingStar","props","state","top","left","this","interval","setInterval","setState","Math","floor","random","toString","clearInterval","className","colour","style","Component","Home","onScroll","handleScroll","ref","parallax","pages","background","Layer","offset","speed","factor","backgroundImage","backgroundSize","animation","color","href","target","rel","id","App","Switch","Route","exact","path","component","Redirect","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cb3cf200.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Parallax } from 'react-spring';\nimport './home.css'\n\nconst BLOG_URL   = 'https://rohankce.gitbook.io/lexicon/'\nconst GITHUB_URL = 'https://github.com/RohanK99'\nconst url = (name, wrap = false) => `${wrap ? 'url(' : ''}https://awv3node-homepage.surge.sh/build/assets/${name}.svg${wrap ? ')' : ''}`\n\nclass ShootingStar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      top: '30%',\n      left: '40%',\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ top: (Math.floor(Math.random()*100).toString() + '%'), left: (Math.floor(Math.random()*100).toString() + '%')}), 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <span className={\"star \" + this.props.colour} style={this.state}></span>\n    )\n  }\n}\n\nclass Home extends Component {\n\n  render() {\n    return (\n      <Parallax onScroll={this.handleScroll} ref={ref => (this.parallax = ref)} pages={1} style={{background: '#21292C'}}>\n        <Parallax.Layer offset={1} speed={1}/>\n        <Parallax.Layer offset={0} speed={0} factor={3} style={{ backgroundImage: url('stars', true), backgroundSize: 'cover', animation: 'shine 10s infinite'}} />\n\n        <Parallax.Layer offset={0} speed={0}>\n          <ShootingStar colour=\"pink\" />\n          <ShootingStar colour=\"blue\" />\n          <ShootingStar colour=\"yellow\" />\n          <ShootingStar colour=\"green\" />\n          <div className=\"vertical-center\">\n            <div className=\"container text-center\">\n              <div className=\"text-group text-white\">\n                <h1>\n                  <span style={{ color: '#F4B447'}}>R</span>\n                  <span style={{ color: '#F69233' }}>O</span>\n                  <span style={{ color: '#F26E54' }}>H</span>\n                  <span style={{ color: '#EE4C7A' }}>A</span>\n                  <span style={{ color: '#A066A8' }}>N</span>\n                  <span> </span>\n                  <span style={{ color: '#4E71B7' }}>K</span>\n                  <span style={{ color: '#0B97AC' }}>U</span>\n                  <span style={{ color: '#00B199'}}>M</span>\n                  <span style={{ color: '#6CB980'}}>A</span>\n                  <span style={{ color: '#8CC66A'}}>R</span>\n                </h1>\n                <hr className=\"hr-gradient\" />\n                <h2>3A uwaterloo computer engineering</h2>\n                <br/>\n                <p>I have an interest in embedded systems, autonomous cars, ai and quant</p>\n                <p>In my spare time, you can find me playing guitar or at the climbing gym</p>\n                <br/>\n                <div className=\"social-buttons\">\n                  <a href={BLOG_URL} target=\"_blank\" rel=\"noopener noreferrer\"><button id=\"blog\">blog</button></a>\n                  <div className=\"divider\" />\n                  <a href={GITHUB_URL} target=\"_blank\" rel=\"noopener noreferrer\"><button id=\"github\">Github</button></a>\n                  <div className=\"divider\" />\n                  <a href=\"mailto:rohank.ce@gmail.com\"><button id=\"email\">email</button></a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Parallax.Layer>\n      </Parallax>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Home from './components/home';\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App-intro\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}